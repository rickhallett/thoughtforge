// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum ContentStatus {
  NEW
  PROCESSING
  ENHANCED
  APPROVED
  SCHEDULED
  PUBLISHED
  FAILED
}

enum ProcessingStage {
  STANDARDIZATION
  AI_ENHANCEMENT
  SEO_ENHANCEMENT
  APPROVAL
  PUBLISHING
}

enum UserRole {
  ADMIN
  EDITOR
  USER
}

enum DestinationType {
  BLOG
  SOCIAL_MEDIA
  NEWSLETTER
  OTHER
}

enum LogLevel {
  INFO
  WARN
  ERROR
}

// Models
model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  role      UserRole
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  approvals Content[] @relation("ApproverContents")
}

model OriginalSource {
  id          String   @id @default(uuid())
  sourceType  String // e.g., 'markdown', 'web_clipping', 'voice_note'
  title       String?
  content     String
  focusPoints String? // Stored as JSON string or separate model if needed
  tags        String[] // Initial tags, can be mapped to Tag model later
  submittedAt DateTime @default(now())
  queryParams Json // Stores optional query parameters
  metadata    Json // Additional metadata if needed

  // Relations
  contents Content[]
}

model Content {
  id               String        @id @default(uuid())
  originalSourceId String
  currentStatus    ContentStatus @default(NEW)
  content          String?
  metadata         Json // Stores additional data like AI outputs
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  // Relations
  originalSource   OriginalSource    @relation(fields: [originalSourceId], references: [id])
  processingLogs   ProcessingLog[]
  errorLogs        ErrorLog[]
  publishingQueues PublishingQueue[]
  tags             ContentTag[]
  approverId       String?
  approver         User?             @relation("ApproverContents", fields: [approverId], references: [id])
}

model ProcessingLog {
  id          String          @id @default(uuid())
  contentId   String
  stage       ProcessingStage
  status      ContentStatus   @default(PROCESSING)
  startedAt   DateTime        @default(now())
  completedAt DateTime?
  details     Json // Any details or outputs from the processing stage

  // Relations
  content   Content    @relation(fields: [contentId], references: [id])
  errorLogs ErrorLog[]
}

model PublishingQueue {
  id                String        @id @default(uuid())
  contentId         String
  scheduledAt       DateTime
  actualPublishedAt DateTime?
  status            ContentStatus @default(SCHEDULED)
  metadata          Json // Additional data like publishing results

  // Relations
  content      Content            @relation(fields: [contentId], references: [id])
  destinations QueueDestination[]
  errorLogs    ErrorLog[]
}

model QueueDestination {
  id                String @id @default(uuid())
  publishingQueueId String
  destinationId     String

  // Relations
  publishingQueue PublishingQueue       @relation(fields: [publishingQueueId], references: [id])
  destination     PublishingDestination @relation(fields: [destinationId], references: [id])
}

model PublishingDestination {
  id        String          @id @default(uuid())
  name      String
  type      DestinationType
  config    Json // Stores credentials or connection info securely
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  // Relations
  queueDestinations QueueDestination[]
}

model ErrorLog {
  id                String   @id @default(uuid())
  contentId         String?
  processingLogId   String?
  publishingQueueId String?
  timestamp         DateTime @default(now())
  message           String
  level             LogLevel @default(ERROR)
  metadata          Json // Additional error details

  // Relations
  content         Content?         @relation(fields: [contentId], references: [id])
  processingLog   ProcessingLog?   @relation(fields: [processingLogId], references: [id])
  publishingQueue PublishingQueue? @relation(fields: [publishingQueueId], references: [id])
}

model Tag {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  contentTags ContentTag[]
}

model ContentTag {
  contentId String
  tagId     String

  // Relations
  content Content @relation(fields: [contentId], references: [id])
  tag     Tag     @relation(fields: [tagId], references: [id])

  @@id([contentId, tagId])
}
